import math
import matplotlib.patches as patches
import pylab
import random

#New jersey
#points = [(41.3394, -74.6559), (40.9934, -73.894), (40.8398, -73.9586), (40.7691, -74.0094), (40.6994, -74.0231), (40.6786, -74.0437), (40.6515, -74.0808), (40.6421, -74.1357), (40.6452, -74.1962), (40.5952, -74.2003), (40.5566, -74.2195), (40.4877, -74.2552), (40.4762, -74.2264), (40.5253, -73.9503), (40.4846, -73.8885), (40.0045, -73.9352), (39.6131, -74.041), (39.4744, -74.2209), (38.9882, -74.6713), (38.8664, -74.8553), (38.8472, -75.0476), (39.0565, -75.1685), (39.2525, -75.325), (39.45, -75.5544), (39.4966, -75.5612), (39.4998, -75.5283), (39.5411, -75.5338), (39.5761, -75.509), (39.6237, -75.5708), (39.6713, -75.5104), (39.7167, -75.4843), (39.8033, -75.4156), (39.836, -75.2632), (39.8823, -75.1918), (40.118, -74.7922), (40.139, -74.7331), (40.2565, -74.8485), (40.3361, -74.9419), (40.402, -74.9721), (40.424, -75.0627), (40.4898, -75.0613), (40.5733, -75.1067), (40.5639, -75.2138), (40.6192, -75.2028), (40.6494, -75.2069), (40.8284, -75.0806), (40.8429, -75.0998), (40.8689, -75.0504), (40.9913, -75.1369), (41.2293, -74.8677), (41.3479, -74.7537), (41.3469, -74.7249)]
#Michigan
#points = [(48.3033, -88.3713), (48.0101, -87.605), (46.8902, -84.8584), (46.6362, -84.765), (46.4606, -84.5563), (46.4525, -84.478), (46.4894, -84.445), (46.5008, -84.4203), (46.4989, -84.3956), (46.5093, -84.375), (46.5069, -84.3386), (46.4927, -84.2905), (46.4951, -84.2651), (46.5343, -84.2253), (46.5404, -84.1951), (46.5272, -84.1779), (46.5348, -84.1347), (46.5041, -84.1113), (46.4189, -84.1457), (46.372, -84.1395), (46.3218, -84.1058), (46.3147, -84.1203), (46.2672, -84.1148), (46.2563, -84.0969), (46.2411, -84.1093), (46.2098, -84.0859), (46.1879, -84.0777), (46.1508, -84.0097), (46.118, -84.007), (46.1018, -83.9761), (46.057, -83.9555), (46.0604, -83.904), (46.1185, -83.8264), (46.1028, -83.7598), (46.1218, -83.6547), (46.1056, -83.5723), (45.9993, -83.4343), (45.8211, -83.5977), (45.3396, -82.5197), (43.5918, -82.1221), (43.0112, -82.4119), (42.9956, -82.4249), (42.9579, -82.4236), (42.9021, -82.4648), (42.8543, -82.4689), (42.81, -82.4826), (42.7863, -82.4723), (42.7339, -82.4847), (42.6855, -82.5032), (42.638, -82.5108), (42.6036, -82.5307), (42.5672, -82.5774), (42.549, -82.5993), (42.5521, -82.6501), (42.5354, -82.668), (42.4746, -82.7257), (42.4726, -82.725), (42.3738, -82.828), (42.3469, -82.944), (42.3382, -82.955), (42.3098, -83.0779), (42.2392, -83.1294), (42.1741, -83.1342), (42.1267, -83.1212), (42.0411, -83.1493), (41.96, -83.1116), (41.7344, -83.4164), (41.7211, -83.8724), (41.7057, -84.3736), (41.6965, -84.8062), (41.7611, -84.8076), (41.7621, -87.2067), (42.4934, -87.0241), (43.3771, -87.1477), (43.7056, -87.1216), (43.9958, -87.0474), (44.1674, -86.9939), (44.472, -86.8662), (44.8841, -86.6849), (45.0813, -86.5009), (45.2353, -86.2495), (45.4438, -86.7563), (45.4438, -87.0996), (45.3772, -87.1518), (45.3502, -87.171), (45.2401, -87.3166), (45.2024, -87.4059), (45.0774, -87.4416), (45.091, -87.5912), (45.1036, -87.6407), (45.2207, -87.697), (45.3367, -87.6476), (45.3878, -87.6984), (45.3425, -87.8494), (45.5025, -87.7959), (45.6726, -87.789), (45.757, -87.9318), (45.7953, -87.9922), (45.8058, -88.1186), (45.8585, -88.087), (45.9531, -88.1955), (45.9722, -88.3438), (45.9836, -88.3891), (46.0113, -88.5457), (45.997, -88.7022), (46.0227, -88.8135), (46.0418, -88.8547), (46.1408, -89.0936), (46.3384, -90.1222), (46.5692, -90.4175), (46.9034, -90.2019), (47.2913, -89.9547), (48.0129, -89.4946), (47.9743, -89.3381), (48.2448, -88.6761), (48.3042, -88.3726)]
#Minnesota
points = [(43.5008, -96.4517), (43.5017, -91.2195), (43.8226, -91.3101), (43.9651, -91.4914), (44.1113, -91.7084), (44.2806, -91.8951), (44.371, -91.9556), (44.4357, -92.2083), (44.5513, -92.336), (44.6501, -92.6367), (44.7877, -92.7658), (45.3135, -92.7081), (45.4505, -92.6532), (45.6083, -92.8482), (45.8307, -92.7356), (45.976, -92.5159), (46.0151, -92.3566), (46.0789, -92.2934), (46.5957, -92.2879), (47.3072, -90.6564), (47.2885, -89.9615), (48.012, -89.4919), (48.0193, -89.7583), (48.0285, -89.9931), (48.0827, -90.0261), (48.1074, -90.1758), (48.0955, -90.3502), (48.1074, -90.4834), (48.1175, -90.5644), (48.0928, -90.7471), (48.1588, -90.7759), (48.2402, -90.8405), (48.2174, -90.9792), (48.0726, -91.3252), (48.0505, -91.5738), (48.1166, -91.707), (48.1963, -91.7166), (48.2494, -91.9844), (48.3188, -92.0078), (48.3544, -92.0531), (48.3599, -92.1561), (48.3307, -92.2975), (48.2475, -92.2742), (48.2228, -92.3717), (48.3854, -92.4609), (48.4474, -92.5104), (48.4611, -92.7122), (48.4984, -92.634), (48.5403, -92.6395), (48.6393, -93.2066), (48.5884, -93.4648), (48.5439, -93.4621), (48.5166, -93.8013), (48.6284, -93.8356), (48.6547, -94.2531), (48.7046, -94.2792), (48.6982, -94.4467), (48.7861, -94.6925), (48.8756, -94.6788), (49.0955, -94.7488), (49.1889, -94.7955), (49.3189, -94.8175), (49.3815, -94.9631), (49.3538, -95.04), (49.3681, -95.1196), (49.3877, -95.1553), (48.9991, -95.1553), (49.0, -97.2304), (48.8647, -97.1851), (48.7806, -97.1576), (48.6683, -97.104), (48.5539, -97.1645), (48.2832, -97.1411), (48.1578, -97.1397), (47.9633, -97.0587), (47.7098, -96.9434), (47.5821, -96.8582), (47.2345, -96.8335), (46.6702, -96.8005), (46.5135, -96.7126), (46.2786, -96.6028), (46.0189, -96.5767), (45.8173, -96.5891), (45.6169, -96.8486), (45.4601, -96.7456), (45.3676, -96.5918), (45.2961, -96.4558), (43.5008, -96.4531)]
#New York
#points = [(42.5142, -79.7624), (42.7783, -79.0672), (42.8508, -78.9313), (42.9061, -78.9024), (42.9554, -78.9313), (42.9584, -78.9656), (42.9886, -79.0219), (43.0568, -79.0027), (43.0769, -79.0727), (43.122, -79.0713), (43.1441, -79.0302), (43.1801, -79.0576), (43.2482, -79.0604), (43.2812, -79.0837), (43.4509, -79.2004), (43.6311, -78.6909), (43.6321, -76.7958), (43.9987, -76.4978), (44.0965, -76.4388), (44.1349, -76.3536), (44.1989, -76.3124), (44.2049, -76.2437), (44.2413, -76.1655), (44.2973, -76.1353), (44.3327, -76.0474), (44.3553, -75.9856), (44.3749, -75.9196), (44.3994, -75.873), (44.4308, -75.8221), (44.474, -75.8098), (44.5425, -75.7288), (44.6647, -75.5585), (44.7672, -75.4088), (44.8101, -75.3442), (44.8383, -75.3058), (44.8676, -75.2399), (44.9211, -75.1204), (44.9609, -74.9995), (44.9803, -74.9899), (44.9852, -74.9103), (45.0017, -74.8856), (45.0153, -74.8306), (45.0046, -74.7633), (45.0027, -74.707), (45.0007, -74.5642), (44.992, -74.1467), (45.0037, -73.7306), (45.0085, -73.4203), (45.0109, -73.343), (44.9874, -73.3547), (44.9648, -73.3379), (44.916, -73.3396), (44.8354, -73.3739), (44.8013, -73.3324), (44.7419, -73.3667), (44.6139, -73.3873), (44.5787, -73.3736), (44.4916, -73.3049), (44.4289, -73.2953), (44.3513, -73.3365), (44.2757, -73.3118), (44.198, -73.3818), (44.1142, -73.4079), (44.0511, -73.4367), (44.0165, -73.4065), (43.9375, -73.4079), (43.8771, -73.3749), (43.8167, -73.3914), (43.779, -73.3557), (43.646, -73.4244), (43.5893, -73.434), (43.5655, -73.3969), (43.6112, -73.3818), (43.6271, -73.3049), (43.5764, -73.3063), (43.5675, -73.2582), (43.5227, -73.2445), (43.2582, -73.2582), (42.9715, -73.2733), (42.8004, -73.2898), (42.746, -73.2664), (42.463, -73.3708), (42.084, -73.5095), (42.0218, -73.4903), (41.8808, -73.4999), (41.2953, -73.5535), (41.2128, -73.4834), (41.1011, -73.7275), (41.0237, -73.6644), (40.9851, -73.6578), (40.9509, -73.6132), (41.1869, -72.4823), (41.2551, -72.095), (41.3005, -71.9714), (41.3108, -71.9193), (41.1838, -71.7915), (41.1249, -71.7929), (41.0462, -71.7517), (40.6306, -72.9465), (40.5368, -73.4628), (40.4887, -73.8885), (40.5232, -73.949), (40.4772, -74.2271), (40.4861, -74.2532), (40.6468, -74.1866), (40.6556, -74.0547), (40.7618, -74.0156), (40.8699, -73.9421), (40.998, -73.8934), (41.0343, -73.9854), (41.3268, -74.6274), (41.3583, -74.7084), (41.3811, -74.7101), (41.4386, -74.8265), (41.5075, -74.9913), (41.6, -75.0668), (41.6719, -75.0366), (41.7672, -75.0545), (41.8808, -75.1945), (42.0013, -75.3552), (42.0003, -75.4266), (42.0013, -77.0306), (41.9993, -79.725), (42.0003, -79.7621), (42.1827, -79.7621), (42.5146, -79.7621)]

random.shuffle(points)
l = len(points)
#compute centroid
centroid = (sum([p[0] for p in points])/len(points),sum([p[1] for p in points])/len(points))

#sort by polar angle
points.sort(key=lambda p: math.atan2(p[1]-centroid[1],p[0]-centroid[0]))

#sort by distance
start = list(points[0])
x0 = start[0]
y0 = start[1]
k = 0
i = 1
n = 0
while(i<l-1):
    d1 = 100000000
    d2 = 100000000
    j = i
    
    '''
    coord1 = list(points[i])
    coord2 = list(points[i+1])
    theta1 = round(math.atan2(coord1[1]-centroid[1],coord1[0]-centroid[0]),5)
    theta2 = round(math.atan2(coord2[1]-centroid[1],coord2[0]-centroid[0]),5)
    theta = abs(theta2-theta1)
    o = (round(theta, 5))
    print(o)
    if(o<0.05):
        n+=1 
    '''#use while inside this, if debugging.

    while(j<l):
        coord = list(points[j])
        x = coord[0]
        y = coord[1]
        diff1 = math.sqrt(pow(abs(x0-x),2)+pow(abs(y0-y),2))
        diff2 = abs(x0-x)+abs(y0-y)
        if(d1>diff1 and d2>diff2):
            d1 = diff1
            d2 = diff2
            temp = points[j]
            index = j
        j+=1    
    
    var = points[i]
    if(var!=temp):
        points.remove(temp)
        points[i] = temp
        points.insert(i+1,var)   
    chg = list(points[i])
    x0 = chg[0]
    y0 = chg[1]
    i+=1
       
#plot points
print(points)
pylab.scatter([p[0] for p in points],[p[1] for p in points])
#plot border lines
#pylab.gca().set_aspect('equal', adjustable='box')
pylab.gca().add_patch(patches.Polygon(points,closed=True,fill=False))
pylab.grid()
pylab.show()
